{"version":3,"sources":["../src/single-spa-angular2.js"],"names":["singleSpaAngular2","defaultOpts","angularPlatform","mainModule","template","Router","domElementGetter","userOpts","Error","opts","bootstrap","bind","mount","unmount","Promise","resolve","props","then","chooseDomElementGetter","name","appName","containerEl","getContainerEl","innerHTML","bootstrapModule","bootstrappedModule","module","reject","routerRef","injector","get","dispose","destroy","element","customProps"],"mappings":";;;;;;;;;;kBAUwBA,iB;AAVxB,IAAMC,cAAc;AAClB;AACAC,mBAAiB,IAFC;AAGlBC,cAAY,IAHM;AAIlBC,YAAU,IAJQ;AAKlB;AACAC,UAAQ,IANU;AAOlBC,oBAAkB,IAPA,CAOM;AAPN,CAApB;;AAUe,SAASN,iBAAT,CAA2BO,QAA3B,EAAqC;AAClD,MAAI,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAAxB,EAAkC;AAChC,UAAM,IAAIC,KAAJ,uDAAN;AACD;;AAED,MAAMC,oBACDR,WADC,EAEDM,QAFC,CAAN;;AAKA,MAAI,CAACE,KAAKP,eAAV,EAA2B;AACzB,UAAM,IAAIM,KAAJ,gIAAN;AACD;;AAED,MAAI,CAACC,KAAKN,UAAV,EAAsB;AACpB,UAAM,IAAIK,KAAJ,gGAAN;AACD;;AAED,MAAI,OAAOC,KAAKL,QAAZ,KAAyB,QAA7B,EAAuC;AACrC,UAAM,IAAII,KAAJ,2DAAN;AACD;;AAED,SAAO;AACLE,eAAWA,UAAUC,IAAV,CAAe,IAAf,EAAqBF,IAArB,CADN;AAELG,WAAOA,MAAMD,IAAN,CAAW,IAAX,EAAiBF,IAAjB,CAFF;AAGLI,aAASA,QAAQF,IAAR,CAAa,IAAb,EAAmBF,IAAnB;AAHJ,GAAP;AAKD;;AAED,SAASC,SAAT,CAAmBD,IAAnB,EAAyB;AACvB,SAAOK,QAAQC,OAAR,EAAP;AACD;;AAED,SAASH,KAAT,CAAeH,IAAf,EAAqBO,KAArB,EAA4B;AAC1B,SAAOF,QACJC,OADI,GAEJE,IAFI,CAEC,YAAM;AACV,QAAMX,mBAAmBY,uBAAuBT,IAAvB,EAA6BO,KAA7B,CAAzB;AACA,QAAI,CAACV,gBAAL,EAAuB;AACrB,YAAM,IAAIE,KAAJ,0CAA+CQ,MAAMG,IAAN,IAAcH,MAAMI,OAAnE,wEAAN;AACD;;AAED,QAAMC,cAAcC,eAAehB,gBAAf,CAApB;AACAe,gBAAYE,SAAZ,GAAwBd,KAAKL,QAA7B;AACD,GAVI,EAWJa,IAXI,CAWC,YAAM;AACV,WAAOR,KACJP,eADI,CAEJsB,eAFI,CAEYf,KAAKN,UAFjB,EAGJc,IAHI,CAGC,kBAAU;AACd,aAAOR,KAAKgB,kBAAL,GAA0BC,MAAjC;AACD,KALI,CAAP;AAMD,GAlBI,CAAP;AAmBD;;AAED,SAASb,OAAT,CAAiBJ,IAAjB,EAAuBO,KAAvB,EAA8B;AAC5B,SAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUY,MAAV,EAAqB;AACtC,QAAIlB,KAAKJ,MAAT,EAAiB;AACf,UAAMuB,YAAYnB,KAAKgB,kBAAL,CAAwBI,QAAxB,CAAiCC,GAAjC,CAAqCrB,KAAKJ,MAA1C,CAAlB;AACAuB,gBAAUG,OAAV;AACD;AACDtB,SAAKgB,kBAAL,CAAwBO,OAAxB;AACA,WAAOvB,KAAKgB,kBAAZ;AACAV;AACD,GARM,CAAP;AASD;;AAED,SAASO,cAAT,CAAwBhB,gBAAxB,EAA0C;AACxC,MAAM2B,UAAU3B,kBAAhB;AACA,MAAI,CAAC2B,OAAL,EAAc;AACZ,UAAM,IAAIzB,KAAJ,uDAAN;AACD;;AAED,SAAOyB,OAAP;AACD;;AAED,SAASf,sBAAT,CAAgCT,IAAhC,EAAsCO,KAAtC,EAA6C;AAC3C,SAAOA,SAASA,MAAMkB,WAAf,IAA8BlB,MAAMkB,WAAN,CAAkB5B,gBAAhD,GAAmEU,MAAMkB,WAAN,CAAkB5B,gBAArF,GAAwGG,KAAKH,gBAApH;AACD","file":"single-spa-angular2.js","sourcesContent":["const defaultOpts = {\n  // required opts\n  angularPlatform: null,\n  mainModule: null,\n  template: null,\n  // optional opts\n  Router: null,\n  domElementGetter: null, // only optional if you provide a domElementGetter as a custom prop\n};\n\nexport default function singleSpaAngular2(userOpts) {\n  if (typeof userOpts !== 'object') {\n    throw new Error(`single-spa-angular2 requires a configuration object`);\n  }\n\n  const opts = {\n    ...defaultOpts,\n    ...userOpts,\n  };\n\n  if (!opts.angularPlatform) {\n    throw new Error(`single-spa-angular2 must be passed opts.angularPlatform. Usually this should be the return value of platformBrowserDynamic()`);\n  }\n\n  if (!opts.mainModule) {\n    throw new Error(`single-spa-angular2 must be passed opts.mainModule, which is the Angular module to bootstrap`);\n  }\n\n  if (typeof opts.template !== 'string') {\n    throw new Error(`single-spa-angular2 must be passed opts.template string`);\n  }\n\n  return {\n    bootstrap: bootstrap.bind(null, opts),\n    mount: mount.bind(null, opts),\n    unmount: unmount.bind(null, opts),\n  };\n}\n\nfunction bootstrap(opts) {\n  return Promise.resolve();\n}\n\nfunction mount(opts, props) {\n  return Promise\n    .resolve()\n    .then(() => {\n      const domElementGetter = chooseDomElementGetter(opts, props)\n      if (!domElementGetter) {\n        throw new Error(`cannot mount angular application '${props.name || props.appName}' without a domElementGetter provided either as an opt or a prop`)\n      }\n\n      const containerEl = getContainerEl(domElementGetter)\n      containerEl.innerHTML = opts.template\n    })\n    .then(() => {\n      return opts\n        .angularPlatform\n        .bootstrapModule(opts.mainModule)\n        .then(module => {\n          return opts.bootstrappedModule = module;\n        })\n    })\n}\n\nfunction unmount(opts, props) {\n  return new Promise((resolve, reject) => {\n    if (opts.Router) {\n      const routerRef = opts.bootstrappedModule.injector.get(opts.Router);\n      routerRef.dispose();\n    }\n    opts.bootstrappedModule.destroy();\n    delete opts.bootstrappedModule;\n    resolve();\n  });\n}\n\nfunction getContainerEl(domElementGetter) {\n  const element = domElementGetter();\n  if (!element) {\n    throw new Error(`domElementGetter did not return a valid dom element`);\n  }\n\n  return element;\n}\n\nfunction chooseDomElementGetter(opts, props) {\n  return props && props.customProps && props.customProps.domElementGetter ? props.customProps.domElementGetter : opts.domElementGetter\n}\n"]}